{"version":3,"sources":["views/rewards/edit/index.js","views/rewards/list/index.js"],"names":["style","position","top","left","transform","width","bgcolor","boxShadow","p","EditReward","open","handleClose","singleReward","pageReload","setPageReload","initialValues","rewardName","amount","validationSchema","Yup","required","Modal","onClose","Box","sx","onSubmit","values","tempData","id","name","coin","Number","fetch","config","apiServer","method","headers","body","JSON","stringify","then","res","json","data","swal","catch","error","field","meta","TextField","touched","label","placeholder","variant","color","margin","Button","type","useStyles","makeStyles","theme","table","minWidth","tableContainer","borderRadius","tableHeaderCell","fontWeight","palette","secondary","main","fontSize","ListRewards","useState","setOpen","rewardData","setRewardData","setSingleReward","page","setPage","rowsPerPage","setRowsPerPage","classes","useEffect","temp","i","length","updateData","sl","push","handleEdit","v","find","reward","MainCard","title","Paper","TableContainer","component","className","Table","TableHead","TableRow","TableCell","align","TableBody","slice","map","row","index","scope","onClick","text","icon","buttons","dangerMode","willDelete","remainingData","filter","TablePagination","rowsPerPageOptions","count","onPageChange","event","newPage","onRowsPerPageChange","target","value"],"mappings":"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","file":"static/js/31.93e32256.chunk.js","sourcesContent":["import { TextField } from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Modal from \"@mui/material/Modal\";\nimport config from \"config\";\nimport { Field, Form, Formik } from \"formik\";\nimport PropTypes from \"prop-types\";\nimport * as React from \"react\";\nimport swal from \"sweetalert\";\nimport * as Yup from \"yup\";\nimport \"./index.css\";\n\nconst style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: 400,\n    bgcolor: \"background.paper\",\n    boxShadow: 24,\n    p: 4,\n};\n\nconst EditReward = ({\n    open,\n    handleClose,\n    singleReward,\n    pageReload,\n    setPageReload,\n}) => {\n    const initialValues = {\n        rewardName:\n            singleReward?.rewardName === null ? \"\" : singleReward?.rewardName,\n        amount: singleReward?.amount === null ? \"\" : singleReward?.amount,\n    };\n    const validationSchema = Yup.object({\n        rewardName: Yup.string().required(\"required field\"),\n        amount: Yup.number().required(\"required field\"),\n    });\n\n    const onSubmit = (values) => {\n        const tempData = {\n            id: singleReward.id,\n            name: values.rewardName,\n            coin: Number(values.amount),\n        };\n\n        fetch(`${config.apiServer}/rewards/updateReward`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify(tempData),\n        })\n            .then((res) => res.json())\n            .then((data) => {\n                handleClose();\n                if (data) {\n                    handleClose();\n                    swal(\"Update Successfully\",'','success');\n                    setPageReload(!pageReload);\n                }\n            })\n            .catch((error) => {\n                swal(\"Error!\", \"Something went wrong\", \"wrong\");\n            });\n    };\n\n    return (\n        <div>\n            <Modal\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n            >\n                <Box sx={style}>\n                    <Formik\n                        initialValues={initialValues}\n                        onSubmit={onSubmit}\n                        validationSchema={validationSchema}\n                    >\n                        <Form>\n                            <Field name=\"rewardName\">\n                                {({ field, meta }) => {\n                                    return (\n                                        <TextField\n                                            error={\n                                                meta.touched && meta.error\n                                                    ? true\n                                                    : false\n                                            }\n                                            id=\"rewardName\"\n                                            label={`Reward Name ${\n                                                meta.touched && meta.error\n                                                    ? \"*\"\n                                                    : \"\"\n                                            }`}\n                                            sx={{ width: 1 }}\n                                            placeholder=\"Text only\"\n                                            variant=\"outlined\"\n                                            color=\"secondary\"\n                                            name=\"rewardName\"\n                                            margin=\"normal\"\n                                            style={{ width: \"100%\" }}\n                                            {...field}\n                                        />\n                                    );\n                                }}\n                            </Field>\n                            <Field name=\"amount\">\n                                {({ field, meta }) => {\n                                    return (\n                                        <TextField\n                                            error={\n                                                meta.touched && meta.error\n                                                    ? true\n                                                    : false\n                                            }\n                                            id=\"amount\"\n                                            label={`Amount ${\n                                                meta.touched && meta.error\n                                                    ? \"*\"\n                                                    : \"\"\n                                            }`}\n                                            sx={{ width: 1 }}\n                                            placeholder=\"Number only\"\n                                            variant=\"outlined\"\n                                            color=\"secondary\"\n                                            name=\"amount\"\n                                            margin=\"normal\"\n                                            style={{ width: \"100%\" }}\n                                            {...field}\n                                        />\n                                    );\n                                }}\n                            </Field>\n                            <Button\n                                type=\"submit\"\n                                variant=\"contained\"\n                                color=\"secondary\"\n                            >\n                                Update\n                            </Button>\n                        </Form>\n                    </Formik>\n                </Box>\n            </Modal>\n        </div>\n    );\n};\n\nexport default EditReward;\nEditReward.propTypes = {\n    open: PropTypes.any,\n    handleClose: PropTypes.any,\n    singleReward: PropTypes.any,\n};\n","import {\n  Button,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n} from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { IconEdit, IconTrash } from \"@tabler/icons\";\nimport config from \"config\";\nimport { useEffect, useState } from \"react\";\nimport swal from \"sweetalert\";\nimport MainCard from \"ui-component/cards/MainCard\";\nimport EditReward from \"../edit\";\n\nconst useStyles = makeStyles((theme) => ({\n  table: {\n    minWidth: 650,\n  },\n  tableContainer: {\n    borderRadius: 15,\n  },\n  tableHeaderCell: {\n    \"& .MuiTableCell-head\": {\n      fontWeight: 700,\n      color: theme.palette.secondary.main,\n      fontSize: 16,\n    },\n  },\n}));\n\nconst ListRewards = () => {\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  const [rewardData, setRewardData] = useState([]);\n  const [singleReward, setSingleReward] = useState({});\n  const [pageReload, setPageReload] = useState(false);\n\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const classes = useStyles();\n\n  // get all rewards\n  useEffect(() => {\n    fetch(`${config.apiServer}/rewards/getAllRewards`)\n      .then((res) => res.json())\n      .then((data) => {\n        const temp = [];\n\n        for (let i = 0; i < data.length; i += 1) {\n          const updateData = data[i];\n          updateData.sl = i + 1;\n          temp.push(updateData);\n        }\n        setRewardData(temp);\n      })\n    .catch({})\n  }, [pageReload]);\n\n  const handleDelete = (id) => {\n    swal({\n      title: \"Are you sure?\",\n      text: \"You Want to Delete!\",\n      icon: \"warning\",\n      buttons: true,\n      dangerMode: true,\n    }).then((willDelete) => {\n      if (willDelete) {\n        fetch(`${config.apiServer}/rewards/deleteRewards`, {\n          method: \"POST\",\n          headers: {\n            \"content-type\": \"application/json\",\n          },\n          body: JSON.stringify({ id: id }),\n        })\n          .then((res) => res.json())\n          .then((data) => {\n            if (data) {\n              swal(\"Delete Successfully\");\n              const remainingData = rewardData?.filter(\n                (reward) => reward.id !== id\n              );\n              setRewardData(remainingData);\n            }\n          });\n      } else {\n        swal(\"Your file is safe!\");\n      }\n    });\n  };\n\n  const handleEdit = (id) => {\n    handleOpen();\n    const v = rewardData.find((reward) => reward.id === id);\n    setSingleReward(v);\n  };\n\n  return (\n    <>\n      <MainCard title=\"Rewards List\">\n        <Paper>\n          <TableContainer component={Paper} className={classes.tableContainer}>\n            <Table className={classes.table} aria-label=\"simple table\">\n              <TableHead>\n                <TableRow className={classes.tableHeaderCell}>\n                  <TableCell align=\"center\">SI. No.</TableCell>\n                  <TableCell align=\"center\">Reward Name</TableCell>\n                  <TableCell align=\"center\">Coin</TableCell>\n                  <TableCell align=\"center\">Action</TableCell>\n                </TableRow>\n              </TableHead>\n\n              <TableBody>\n                {rewardData\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                  .map((row, index) => (\n                    // eslint-disable-next-line no-underscore-dangle\n                    <TableRow key={index}>\n                      <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                        {row?.sl}\n                      </TableCell>\n                      <TableCell align=\"center\">{row.rewardName}</TableCell>\n                      <TableCell align=\"center\">{row.amount}</TableCell>\n                      <TableCell align=\"center\">\n                        <Button\n                          color=\"secondary\"\n                          onClick={() => handleEdit(row.id)}\n                        >\n                          {<IconEdit />}\n                        </Button>\n                        <Button\n                          color=\"secondary\"\n                          onClick={() => handleDelete(row.id)}\n                        >\n                          {<IconTrash />}\n                        </Button>\n                        <EditReward\n                          open={open}\n                          handleClose={handleClose}\n                          singleReward={singleReward}\n                          pageReload={pageReload}\n                          setPageReload={setPageReload}\n                        />\n                      </TableCell>\n                    </TableRow>\n                  ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n\n          <TablePagination\n            rowsPerPageOptions={[5, 10, 25, 100]}\n            component=\"div\"\n            count={rewardData.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onPageChange={handleChangePage}\n            onRowsPerPageChange={handleChangeRowsPerPage}\n          />\n        </Paper>\n      </MainCard>\n    </>\n  );\n};\n\nexport default ListRewards;\n"],"sourceRoot":""}