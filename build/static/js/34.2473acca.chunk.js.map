{"version":3,"sources":["views/Exercise/ExerciseList/EditCategory.js"],"names":["EditCategory","exerciseId","useParams","React","useState","subCategoryList","setSubCategoryList","dataName","setDataName","isLoading","setIsLoading","navigate","useNavigate","isUpdated","setIsUpdated","useEffect","fetch","config","apiServer","then","res","json","data","singleData","find","item","id","categoryName","subCatagory","map","index","subCategoryName","gradesValue","subCategoryGrades","subId","subIsEnable","isEnabled","initialValues","subExercise","exerciseName","handleBackToList","title","onSubmit","values","formikHelpers","subCategory","sc","method","headers","body","JSON","stringify","swal","catch","err","handleExerciseData","resetForm","errors","touched","container","rowSpacing","columnSpacing","xs","sm","md","as","TextField","name","label","margin","style","width","marginBottom","color","type","value","readOnly","disabled","error","Boolean","helperText","remove","push","length","exercise","sx","mb","variant","onClick","display","gutterBottom","valuedefault","required","e","target","checked","defaultChecked","FormControlLabel","control","includes","mt","ml"],"mappings":"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","file":"static/js/34.2473acca.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { Box, Button, Checkbox, FormControlLabel, Grid, Switch, TextField, Typography } from \"@mui/material\";\nimport config from \"config\";\nimport { Field, FieldArray, Form, Formik } from \"formik\";\nimport React from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport swal from \"sweetalert\";\nimport MainCard from \"ui-component/cards/MainCard\";\n\n\nconst EditCategory = () => {\n  const { exerciseId } = useParams();\n  const [subCategoryList, setSubCategoryList] = React.useState([]);\n  const [dataName, setDataName] = React.useState(\"\");\n  const [isLoading, setIsLoading] = React.useState(true);\n  const navigate = useNavigate();\n  const [isUpdated, setIsUpdated] = React.useState(false);\n\n\n \n  React.useEffect(() => {\n    fetch(`${config.apiServer}/category/getAllCategory`)\n      .then((res) => res.json())\n      .then((data) => {\n        const singleData = data.find((item) => item.id === exerciseId);\n        setDataName(singleData.categoryName);\n      });\n  }, [exerciseId]);\n\n  React.useEffect(() => {\n    fetch(`${config.apiServer}/category/getAllSubCategories/${exerciseId}`)\n      .then((res) => res.json())\n      .then((data) => {\n        setSubCategoryList(data);\n        setIsLoading(false);\n      });\n  }, [exerciseId, isUpdated]);\n\n  const subCatagory = subCategoryList.map(\n    (item, index) => \n      item.subCategoryName,\n  );\n  const gradesValue = subCategoryList.map(\n    (item, index) => item.subCategoryGrades\n  );\n\n  const subId = subCategoryList.map((item, index) => item.id);\n  const subIsEnable = subCategoryList.map((item, index) => item.isEnabled);\n  if (isLoading) return null;\n  const initialValues = {\n    subExercise: [...subCategoryList],\n    exerciseName: dataName,\n  };\n\n  //submit\n   const handleExerciseData = (values) => {\n     // values.exerciseName = exerciseName;\n     const data = {\n       exerciseName: values.exerciseName,\n       subCategory: values.subExercise.map((sc) => {\n         return sc;\n       }),\n     };\n\n     fetch(`${config.apiServer}/category/${exerciseId}`, {\n       method: \"PUT\",\n       headers: { \"Content-Type\": \"application/json\" },\n       body: JSON.stringify(data),\n     })\n       .then((res) => res.json())\n       .then(() => {\n         swal(\"Update successful\", \"\", \"success\");\n         navigate(\"/admin/exercise/exercise-list\");\n       })\n       .catch((err) => { \n          swal(\"Update failed\", \"\", \"error\");\n          \n        });\n   };\n  const enableDisable = (id, data) => {\n    fetch(`${config.apiServer}/category/${id}/enableDisableSubCategory`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ data }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        if (data) {\n          setIsUpdated(!isUpdated);\n          swal(`Update successful`, \"\", \"success\");\n        }\n      })\n      .catch((err) => { });\n\n  \n  };\n\n  const handleBackToList = () => { \n    navigate(\"/admin/exercise/exercise-list\");\n  }\n\n  return (\n    <MainCard title=\"Edit exercise\">\n      <Formik\n        initialValues={initialValues}\n        onSubmit={(values, formikHelpers) => {\n          handleExerciseData(values);\n          formikHelpers.resetForm();\n        }}\n        \n      >\n        {({ values, errors, touched }) => (\n          <Form>\n            <Grid\n              container\n              rowSpacing={1}\n              columnSpacing={{ xs: 1, sm: 2, md: 3 }}\n            >\n              <Grid item xs={12} md={12}>\n                <Field\n                  id=\"exerciseName\"\n                  as={TextField}\n                  name=\"exerciseName\"\n                  label=\"Exercise Name\"\n                  margin=\"normal\"\n                  style={{\n                    width: \"100%\",\n                    marginBottom: \"20px\",\n                  }}\n                  color=\"secondary\"\n                  type=\"name\"\n                  value={dataName}\n                  readOnly\n                  disabled\n                  error={\n                    Boolean(errors.exerciseName) &&\n                    Boolean(touched.exerciseName)\n                  }\n                  helperText={\n                    Boolean(touched.exerciseName) && errors.exerciseName\n                  }\n                  //   required\n                />\n              </Grid>\n              <Grid item xs={12} md={12}>\n                <FieldArray name=\"subExercise\">\n                  {({ remove, push }) => (\n                    <div>\n                      {values?.subExercise?.length > 0 &&\n                        values.subExercise.map((exercise, index) => (\n                          <Grid\n                            key={index}\n                            container\n                            rowSpacing={1}\n                            columnSpacing={{\n                              xs: 1,\n                              sm: 2,\n                              md: 3,\n                            }}\n                            style={{\n                              marginBottom: \"20px\",\n                            }}\n                          >\n                            <Grid item xs={12} md={12}>\n                              {index === 0 && (\n                                <Button\n                                  sx={{\n                                    mb: 2,\n                                  }}\n                                  variant=\"contained\"\n                                  color=\"secondary\"\n                                  onClick={() => push(\"\")}\n                                >\n                                  Add Sub-Category\n                                </Button>\n                              )}\n                            </Grid>\n\n                            <Grid item xs={12} md={4}>\n                              <Typography\n                                variant=\"h4\"\n                                display=\"block\"\n                                gutterBottom\n                                sx={{\n                                  mb: 2,\n                                }}\n                              >\n                                SubExercise - {index+1}\n                              </Typography>\n                              <Field\n                                as={TextField}\n                                label=\"Sub-Exercise\"\n                                name={`subExercise[${index}].subCategoryName`}\n                                // type=\"text\"\n                                style={{\n                                  width: \"100%\",\n                                  marginBottom: \"0\",\n                                }}\n                                valuedefault={subCatagory[index] || \"\"}\n                                color=\"secondary\"\n                                required\n                              />\n                              <span>\n                                <Switch\n                                  onClick={(e) =>\n                                    enableDisable(\n                                      subId[index],\n                                      e.target.checked\n                                    )\n                                  }\n                                  defaultChecked={\n                                    subIsEnable[index] ? true : false\n                                  }\n                                  color=\"secondary\"\n                                />{\" \"}\n                                {subIsEnable[index] ? \"Enable\" : \"Disable\"}\n                              </span>\n                            </Grid>\n\n                            <Grid item xs={12} md={6}>\n                              {/* //checkbox  */}\n                              <Typography\n                                variant=\"h4\"\n                                display=\"block\"\n                                gutterBottom\n                                sx={{\n                                  mb: 2,\n                                }}\n                              >\n                                Grades\n                              </Typography>\n\n                              <label>\n                                <Field\n                                  as={FormControlLabel}\n                                  control={\n                                    <Checkbox\n                                      color=\"secondary\"\n                                      defaultChecked={\n                                        gradesValue[index]?.includes(\"1\")\n                                          ? true\n                                          : false\n                                      }\n                                    />\n                                  }\n                                  label=\"1\"\n                                  name={`subExercise[${index}].subCategoryGrades`}\n                                  value=\"1\"\n                                />\n                              </label>\n                              <label>\n                                <Field\n                                  as={FormControlLabel}\n                                  control={\n                                    <Checkbox\n                                      color=\"secondary\"\n                                      defaultChecked={\n                                        gradesValue[index]?.includes(\"2\")\n                                          ? true\n                                          : false\n                                      }\n                                    />\n                                  }\n                                  label=\"2\"\n                                  name={`subExercise[${index}].subCategoryGrades`}\n                                  value=\"2\"\n                                />\n                              </label>\n                              <label>\n                                <Field\n                                  as={FormControlLabel}\n                                  control={\n                                    <Checkbox\n                                      color=\"secondary\"\n                                      defaultChecked={\n                                        gradesValue[index]?.includes(\"3\")\n                                          ? true\n                                          : false\n                                      }\n                                    />\n                                  }\n                                  label=\"3\"\n                                  name={`subExercise[${index}].subCategoryGrades`}\n                                  value=\"3\"\n                                />\n                              </label>\n                              <label>\n                                <Field\n                                  as={FormControlLabel}\n                                  control={\n                                    <Checkbox\n                                      color=\"secondary\"\n                                      defaultChecked={\n                                        gradesValue[index]?.includes(\"4\")\n                                          ? true\n                                          : false\n                                      }\n                                    />\n                                  }\n                                  label=\"4\"\n                                  name={`subExercise[${index}].subCategoryGrades`}\n                                  value=\"4\"\n                                />\n                              </label>\n                              <label>\n                                <Field\n                                  as={FormControlLabel}\n                                  control={\n                                    <Checkbox\n                                      color=\"secondary\"\n                                      defaultChecked={\n                                        gradesValue[index]?.includes(\"5\")\n                                          ? true\n                                          : false\n                                      }\n                                    />\n                                  }\n                                  label=\"5\"\n                                  name={`subExercise[${index}].subCategoryGrades`}\n                                  value=\"5\"\n                                />\n                              </label>\n                              <label>\n                                <Field\n                                  as={FormControlLabel}\n                                  control={\n                                    <Checkbox\n                                      color=\"secondary\"\n                                      defaultChecked={\n                                        gradesValue[index]?.includes(\"6\")\n                                          ? true\n                                          : false\n                                      }\n                                    />\n                                  }\n                                  label=\"6\"\n                                  name={`subExercise[${index}].subCategoryGrades`}\n                                  value=\"6\"\n                                />\n                              </label>\n                              <label>\n                                <Field\n                                  as={FormControlLabel}\n                                  control={\n                                    <Checkbox\n                                      color=\"secondary\"\n                                      defaultChecked={\n                                        gradesValue[index]?.includes(\"other\")\n                                          ? true\n                                          : false\n                                      }\n                                    />\n                                  }\n                                  label=\"Other\"\n                                  name={`subExercise[${index}].subCategoryGrades`}\n                                  value=\"other\"\n                                />\n                              </label>\n                            </Grid>\n                            <Grid item xs={12} md={2}>\n                              <Box>\n                                {subCategoryList.length < index + 1 && (\n                                  <Button\n                                    variant=\"contained\"\n                                    color=\"error\"\n                                    onClick={() => remove(index)}\n                                    sx={{\n                                      mt: 4,\n                                    }}\n                                  >\n                                    Delete\n                                  </Button>\n                                )}\n                              </Box>\n                            </Grid>\n                          </Grid>\n                        ))}\n                    </div>\n                  )}\n                </FieldArray>\n              </Grid>\n            </Grid>\n\n            <Button variant=\"contained\" color=\"secondary\" type=\"submit\">\n              Submit\n            </Button>\n            <Button\n              onClick={handleBackToList}\n              variant=\"contained\" color=\"error\" sx={{ ml: 2 }}>\n              Cancel\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </MainCard>\n  );\n};\n\nexport default EditCategory;\n"],"sourceRoot":""}