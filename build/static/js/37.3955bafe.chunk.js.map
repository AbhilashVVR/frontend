{"version":3,"sources":["views/GameManagement/GameList/SinglePlayer.js","views/GameManagement/GameList/AddGame.js"],"names":["SinglePlayer","playerData","Grade","useState","gradeValue","setGradeValue","gameCategory","setGameCategory","formData","FormData","React","FileUpload","setFileUpload","MainCard","title","onSubmit","event","preventDefault","append","gameName","setTimeout","fetch","config","apiServer","method","body","then","res","json","data","message","swal","catch","err","Box","Typography","variant","display","gutterBottom","TextField","name","fullWidth","disabled","color","value","Grid","container","rowSpacing","columnSpacing","xs","sm","md","item","InputLabel","id","Select","placeholder","onChange","e","target","style","width","required","map","grade","index","MenuItem","htmlFor","className","Button","component","accept","type","files","margin","AddGame","params","useParams","setPlayerData","previousData","setPreviousData","useEffect","gameId","Items","datas","i","sl","words","answer","level","language","createdAt","format","Date","sx","mt","length","titles","textAlign"],"mappings":"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","file":"static/js/37.3955bafe.chunk.js","sourcesContent":["import {\n  Button,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport config from \"config\";\nimport React, { useState } from \"react\";\nimport swal from \"sweetalert\";\nimport MainCard from \"ui-component/cards/MainCard\";\nimport \"../../Banner/index.css\";\n\nconst SinglePlayer = ({ playerData }) => {\n  const Grade = [1, 2, 3, 4, 5, 6, \"Others\"];\n  const [gradeValue, setGradeValue] = useState(\"\");\n  const [gameCategory, setGameCategory] = useState(\"\");\n  const formData = new FormData();\n  const [FileUpload, setFileUpload] = React.useState(null);\n\n  const handleSinglePlayer = (event) => {\n    event.preventDefault();\n    formData.append(\"files\", FileUpload[0]);\n    formData.append(\"grade\", gradeValue);\n    formData.append(\"gameCategory\", gameCategory);\n    formData.append(\"gameName\", playerData?.gameName);\n    setTimeout(() => {\n      fetch(`${config.apiServer}/singleque/register`, {\n        method: \"POST\",\n        body: formData,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          if (data.message) {\n            swal(\"Success\", data.message, \"success\");\n          } else {\n            swal(\"Error\", \"Something Went Wrong!\", \"error\");\n          }\n        })\n        .catch((err) => {});\n    }, 1000);\n  };\n  return (\n    <div>\n      <MainCard title=\"Single Player(Add Question)\">\n        <form onSubmit={handleSinglePlayer}>\n          <Box>\n            <Typography variant=\"caption\" display=\"block\" gutterBottom>\n              Game Name\n            </Typography>\n            <TextField\n              \n              name=\"gameName\"\n              variant=\"outlined\"\n              fullWidth\n              disabled\n              color=\"secondary\"\n              value={playerData?.gameName}\n            />\n          </Box>\n          <Grid\n            container\n            rowSpacing={1}\n            columnSpacing={{ xs: 1, sm: 2, md: 3 }}\n          >\n            <Grid item xs={12} md={6}>\n              <InputLabel id=\"demo-simple-select-label\">Grade</InputLabel>\n              <Select\n                id=\"demo-simple-select-label\"\n                // label=\"Grade\"\n                value={gradeValue || \"\"}\n                placeholder=\"Select-Grade\"\n                onChange={(e) => setGradeValue(e.target.value)}\n                style={{ width: \"100%\" }}\n                color=\"secondary\"\n                required\n              >\n                {Grade?.map((grade, index) => (\n                  <MenuItem key={index} value={grade}>\n                    {grade}\n                  </MenuItem>\n                ))}\n              </Select>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <InputLabel id=\"demo-simple-select-label\">Category</InputLabel>\n              <Select\n                id=\"demo-simple-select-label\"\n                //   label=\"Grade\"\n                placeholder=\"Select-Grade\"\n                value={gameCategory || \"\"}\n                onChange={(e) => setGameCategory(e.target.value)}\n                style={{ width: \"100%\" }}\n                color=\"secondary\"\n                required\n              >\n                <MenuItem value=\"singlePlayer\">Single Player</MenuItem>\n                <MenuItem value=\"multiPlayer\">Multi Player</MenuItem>\n                <MenuItem value=\"dailyCompetition\">Daily Competition</MenuItem>\n              </Select>\n            </Grid>\n            <Grid item xs={12} md={12}>\n              <Typography variant=\"caption\" display=\"block\" gutterBottom>\n                Import Questions\n              </Typography>\n              <label htmlFor=\"contained-button-file\">\n                <span className=\"FlexButton\">\n                  {!FileUpload ? (\n                    <div className=\"FlexButton_uploadText\">\n                      <Button variant=\"contained\" component=\"span\">\n                        Upload Files\n                      </Button>\n                    </div>\n                  ) : (\n                    <div className=\"FlexButton_uploadText\">\n                      {FileUpload[0]?.name}\n                    </div>\n                  )}\n                </span>\n                <span className=\"imageFieldPosition\">\n                  <input\n                    id=\"contained-button-file\"\n                    accept=\".csv\"\n                    type=\"file\"\n                    style={{ display: \"none\" }}\n                    onChange={(e) => setFileUpload(e.target.files)}\n                    required\n                    margin=\"normal\"\n                  />\n                </span>\n              </label>\n            </Grid>\n          </Grid>\n          <Button variant=\"contained\" color=\"secondary\" type=\"submit\">\n            Submit\n          </Button>\n        </form>\n      </MainCard>\n    </div>\n  );\n};\n\nexport default SinglePlayer;\n","import { Typography } from \"@mui/material\";\nimport config from \"config\";\nimport { format } from \"date-fns\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport MainCard from \"ui-component/cards/MainCard\";\nimport MainTable from \"ui-component/table/Maintable\";\nimport SinglePlayer from \"./SinglePlayer\";\n\nconst AddGame = () => {\n  const params = useParams();\n  const [playerData, setPlayerData] = useState([]);\n  const [previousData, setPreviousData] = useState([]);\n  useEffect(() => {\n    fetch(`${config.apiServer}/game/${params.gameId}/get-game`)\n      .then((res) => res.json())\n      .then((data) => {\n        setPlayerData(data);\n      })\n      .catch((err) => {});\n\n    fetch(`${config.apiServer}/singleque/get/${params.gameId}`)\n      .then((res) => res.json())\n      .then((data) => {\n        setPreviousData(data.Items);\n      });\n  }, [params.gameId]);\n\n  const datas = previousData.map((data, i) => {\n    const temp = {\n      sl: i + 1,\n      words: data.words,\n      answer: data.answer,\n      grade: data.grade,\n      level: data.level,\n      language: data.language,\n      createdAt: format(new Date(`${data.createdAt}`), \"dd-MMM-yyyy\"),\n    };\n    return temp;\n  });\n  return (\n    <div>\n      <SinglePlayer playerData={playerData} />\n      <MainCard title=\"Previously Added\" sx={{ mt: 2 }}>\n        {previousData.length > 0 ? (\n          <MainTable\n            titles={[\n              \"Sl. No.\",\n              \"Words\",\n              \"Answer\",\n              \"Grade\",\n              \"Level\",\n              \"Language\",\n              \"Created On\",\n            ]}\n            data={datas}\n          />\n        ) : (\n          <Typography\n            variant=\"caption\"\n            sx={{ textAlign: \"center\" }}\n            display=\"block\"\n            gutterBottom\n          >\n            No Data Found\n          </Typography>\n        )}\n      </MainCard>\n    </div>\n  );\n};\n\nexport default AddGame;\n"],"sourceRoot":""}