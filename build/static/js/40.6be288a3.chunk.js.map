{"version":3,"sources":["views/GameManagement/GameQuestionUpload/GameQuestionUpload.js"],"names":["GameQuestionUpdateModal","React","lazy","useStyles","makeStyles","theme","table","minWidth","tableContainer","borderRadius","tableHeaderCell","fontWeight","color","palette","secondary","main","fontSize","GameQuestionUpload","useState","filteringData","setFilteringData","allGames","setAllGames","id","setId","gradeValue","setGradeValue","levelValue","setLevelValue","singleQuestion","setSingleQuestion","grade","level","formErrors","setFormErrors","open","setOpen","handleClose","page","setPage","rowsPerPage","setRowsPerPage","classes","useEffect","fetch","config","apiServer","then","res","json","data","catch","err","swal","handleEdit","Object","keys","length","er","title","text","icon","buttons","onSubmit","e","preventDefault","Items","container","rowSpacing","columnSpacing","xs","sm","md","item","fullWidth","error","labelId","value","label","onChange","target","map","game","gameName","variant","isNaN","Number","helperText","sx","textAlign","mt","type","mx","onClick","component","Paper","className","align","slice","fData","width","question","parse","option1","option2","option3","correctAnswer","words","answer","fallback","dangerMode","willDelete","console","log","method","headers","handleDelete","colSpan","rowsPerPageOptions","count","onPageChange","event","newPage","onRowsPerPageChange"],"mappings":"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","file":"static/js/40.6be288a3.chunk.js","sourcesContent":["import {\n  Box,\n  Button,\n  FormControl,\n  FormHelperText,\n  Grid,\n  InputLabel,\n  MenuItem,\n  TextField,\n  Select,\n} from \"@mui/material\";\nimport React, { Suspense } from \"react\";\nimport MainCard from \"ui-component/cards/MainCard\";\nimport config from \"config\";\nimport { makeStyles } from \"@mui/styles\";\nimport parse from \"html-react-parser\";\nimport {\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n} from \"@mui/material\";\nimport { IconEdit, IconTrash } from \"@tabler/icons\";\nimport { useEffect } from \"react\";\nimport swal from \"sweetalert\";\nconst GameQuestionUpdateModal = React.lazy(() =>\n  import(\"./GameQuestionUpdateModal\")\n);\n// mui style component\nconst useStyles = makeStyles((theme) => ({\n  table: {\n    minWidth: 650,\n  },\n  tableContainer: {\n    borderRadius: 15,\n  },\n  tableHeaderCell: {\n    \"& .MuiTableCell-head\": {\n      fontWeight: 700,\n      color: theme.palette.secondary.main,\n      fontSize: 16,\n    },\n  },\n}));\nconst GameQuestionUpload = () => {\n  const [filteringData, setFilteringData] = React.useState([]);\n  const [allGames, setAllGames] = React.useState([]);\n  const [id, setId] = React.useState(\"\");\n  const [gradeValue, setGradeValue] = React.useState(\"\");\n  const [levelValue, setLevelValue] = React.useState(\"\");\n  const [singleQuestion, setSingleQuestion] = React.useState({});\n  const grades = [1, 2, 3, 4, 5, 6, \"Others\"];\n\n  //form validation\n  const [formErrors, setFormErrors] = React.useState({\n    grade: \"\",\n    id: \"\",\n    level: \"\",\n  });\n\n  //modal\n  const [open, setOpen] = React.useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  //pagination\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n  const classes = useStyles();\n\n  //all games\n  useEffect(() => {\n    fetch(`${config.apiServer}/game/get-games`)\n      .then((res) => res.json())\n      .then((data) => {\n        setAllGames(data);\n      })\n      .catch((err) => {\n        swal(\"Error\", \"Something went wrong\", \"error\");\n      });\n  }, []);\n\n  //id\n  const handleChangeGameName = (e) => {\n    setId(e.target.value);\n  };\n\n  //submit\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (id === \"\" || gradeValue === \"\" || levelValue === \"\") {\n      setFormErrors({\n        id: \"Please select a game\",\n        grade: \"Please select a grade\",\n        level: \"Please select a level\",\n      });\n    } else {\n      setFormErrors({\n        id: \"\",\n        grade: \"\",\n        level: \"\",\n      });\n      fetch(\n        `${config.apiServer}/singleque/get/${gradeValue}/${levelValue}/${id}`\n      )\n        .then((res) => res.json())\n        .then((data) => {\n          setFilteringData(data.Items);\n        })\n        .catch((err) => {\n          swal({\n            title: \"Failed\",\n            text: \"Failed to fetch data\",\n            icon: \"error\",\n            buttons: true,\n          });\n        });\n    }\n  };\n\n  //reset\n  const handleReset = (e) => {\n    e.preventDefault();\n    setFilteringData([]);\n    setGradeValue(\"\");\n    setId(\"\");\n    setLevelValue(\"\");\n  };\n\n  //handle delete\n  const handleDelete = (id) => {\n    swal({\n      title: \"Are you sure?\",\n      text: \"Once deleted, you will not be able to recover this!\",\n      icon: \"warning\",\n      buttons: true,\n      dangerMode: true,\n    }).then((willDelete) => {\n      if (willDelete) {\n        console.log(\"delete\");\n        //fetch data\n        fetch(\n          `${config.apiServer}/singleque/deleteSinglePlayerQuestion/${id}`,\n          {\n            method: \"DELETE\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }\n        )\n          .then((res) => res.json())\n          .then((data) => {\n            if (data) {\n              swal({\n                title: \"Deleted!\",\n                text: \"Your Question has been deleted.\",\n                icon: \"success\",\n                buttons: true,\n              });\n            }\n          })\n          .catch((err) => {\n            swal({\n              title: err,\n              text: \"Please try again!\",\n              icon: \"error\",\n              buttons: true,\n            });\n          });\n      } else {\n        swal({\n          title: \"Your data is safe!\",\n          text: \"Your data is safe!\",\n          icon: \"success\",\n        });\n      }\n    });\n  };\n\n  //single question\n  const handleEdit = (id) => {\n    handleOpen();\n    setSingleQuestion({});\n    fetch(`${config.apiServer}/singleque/getSinglePlayerQuestion/${id}`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (Object.keys(data).length === 0) {\n          return;\n        }\n        setSingleQuestion(data);\n      })\n      .catch((er) => {\n        swal({\n          title: \"Failed\",\n          text: \"Something went wrong\",\n          icon: \"error\",\n          buttons: true,\n        });\n      });\n  };\n\n  return (\n    <>\n      <MainCard title=\"Question Upload\">\n        <form onSubmit={handleSubmit}>\n          <Grid\n            container\n            rowSpacing={1}\n            columnSpacing={{ xs: 1, sm: 2, md: 3 }}\n          >\n            <Grid item xs={12} md={4}>\n              <FormControl fullWidth error={formErrors.id.length > 0}>\n                <InputLabel id=\"demo-simple-select-label\">Games</InputLabel>\n                <Select\n                  labelId=\"demo-simple-select-label\"\n                  id=\"demo-simple-select\"\n                  value={id}\n                  label=\"Games\"\n                  onChange={handleChangeGameName}\n                >\n                  {allGames.map((game) => (\n                    <MenuItem key={game?.id} value={game?.id}>\n                      {game?.gameName}\n                    </MenuItem>\n                  ))}\n                </Select>\n                <FormHelperText>\n                  {formErrors.id.length > 0 && <span>{formErrors?.id}</span>}\n                </FormHelperText>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <FormControl fullWidth error={formErrors.grade.length > 0}>\n                <InputLabel id=\"demo-simple-select-label\">Grade</InputLabel>\n                <Select\n                  labelId=\"demo-simple-select-label\"\n                  id=\"demo-simple-select\"\n                  value={gradeValue}\n                  label=\"Grade\"\n                  onChange={(e) => setGradeValue(e.target.value)}\n                >\n                  {grades.map((grade) => (\n                    <MenuItem key={grade} value={grade}>\n                      {grade}\n                    </MenuItem>\n                  ))}\n                </Select>\n                <FormHelperText>\n                  {formErrors.grade.length > 0 && (\n                    <span>{formErrors.grade}</span>\n                  )}\n                </FormHelperText>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <TextField\n                fullWidth\n                label=\"Level\"\n                variant=\"outlined\"\n                value={levelValue}\n                onChange={(e) => {\n                  if (isNaN(Number(e.target.value))) {\n                    return;\n                  } else {\n                    setLevelValue(e.target.value);\n                  }\n                }}\n                color=\"secondary\"\n                error={formErrors.level.length > 0}\n                helperText={\n                  formErrors.level.length > 0 && <span>{formErrors.level}</span>\n                }\n              />\n            </Grid>\n\n            <Grid item xs={12} md={12} sx={{ textAlign: \"center\", mt: 2 }}>\n              <Button variant=\"contained\" color=\"secondary\" type=\"submit\">\n                Submit\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                sx={{ mx: 2 }}\n                onClick={handleReset}\n              >\n                Reset\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n      </MainCard>\n      <MainCard sx={{ mt: 1 }}>\n        {/* table */}\n        <TableContainer component={Paper} className={classes.tableContainer}>\n          <Table className={classes.table} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow className={classes.tableHeaderCell}>\n                {/* <TableCell align=\"center\">Sl. No.</TableCell> */}\n                <TableCell align=\"center\">Grade</TableCell>\n                <TableCell align=\"center\">Level</TableCell>\n                {id === \"nDiny1GkmGtp99kvoTQN\" && (\n                  <>\n                    <TableCell align=\"center\">Question</TableCell>\n                    <TableCell align=\"center\">Option A</TableCell>\n                    <TableCell align=\"center\">Option B</TableCell>\n                    <TableCell align=\"center\">Option C</TableCell>\n                  </>\n                )}\n                {id === \"N8m7QQi6AizzRWhbihHs\" && (\n                  <TableCell align=\"center\">Words</TableCell>\n                )}\n                <TableCell align=\"center\">Answer</TableCell>\n                <TableCell align=\"center\">Action</TableCell>\n              </TableRow>\n            </TableHead>\n\n            <TableBody>\n              {filteringData?.length > 0 ? (\n                filteringData\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                  .map((fData) => (\n                    <TableRow key={fData?.id}>\n                      <TableCell\n                        sx={{\n                          width: \"10%\",\n                          textAlign: \"center\",\n                        }}\n                      >\n                        {fData?.grade}\n                        {/* {allSubAndGrade?.sl} */}\n                      </TableCell>\n                      <TableCell\n                        sx={{\n                          width: \"10%\",\n                          textAlign: \"center\",\n                        }}\n                      >\n                        {fData?.level}\n                      </TableCell>\n                      {id === \"nDiny1GkmGtp99kvoTQN\" && (\n                        <>\n                          <TableCell\n                            sx={{\n                              width: \"30%\",\n                              textAlign: \"center\",\n                            }}\n                          >\n                            {fData?.question ? parse?.(fData?.question) : \"\"}\n                          </TableCell>\n                          <TableCell\n                            sx={{\n                              width: \"10%\",\n                              textAlign: \"center\",\n                            }}\n                          >\n                            {fData?.option1}\n                          </TableCell>\n                          <TableCell\n                            sx={{\n                              width: \"10%\",\n                              textAlign: \"center\",\n                            }}\n                          >\n                            {fData?.option2}\n                          </TableCell>\n                          <TableCell\n                            sx={{\n                              width: \"10%\",\n                              textAlign: \"center\",\n                            }}\n                          >\n                            {fData?.option3}\n                          </TableCell>\n                          <TableCell\n                            sx={{\n                              width: \"10%\",\n                              textAlign: \"center\",\n                            }}\n                          >\n                            {fData?.correctAnswer}\n                          </TableCell>\n                        </>\n                      )}\n                      {\n                        id === \"N8m7QQi6AizzRWhbihHs\" && <>\n                          <TableCell\n                            sx={{\n                              width: \"30%\",\n                              textAlign: \"center\",\n                            }}\n                          >\n                            {fData?.words}\n                          </TableCell>\n                          <TableCell\n                            sx={{\n                              width: \"10%\",\n                              textAlign: \"center\",\n                            }}\n                          >\n                            {fData?.answer}\n                          </TableCell>\n                        </>\n                      }\n                      <TableCell\n                        sx={{\n                          width: \"10%\",\n                          textAlign: \"center\",\n                        }}\n                      >\n                        <Button\n                          color=\"secondary\"\n                          onClick={() => handleEdit(fData?.id)}\n                        >\n                          {<IconEdit />}\n                        </Button>\n                        {singleQuestion?.id && (\n                          <Suspense fallback={\"\"}>\n                            <GameQuestionUpdateModal\n                              open={open}\n                              handleClose={handleClose}\n                              singleQuestion={singleQuestion}\n                              id={id}\n                            />\n                          </Suspense>\n                        )}\n                        <Button\n                          color=\"secondary\"\n                          onClick={(e) => handleDelete(fData?.id)}\n                        >\n                          {<IconTrash />}\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))\n              ) : (\n                <TableRow>\n                  <TableCell colSpan={9}>\n                    <Box sx={{ textAlign: \"center\" }}>\n                      <h3>No Data Found</h3>\n                    </Box>\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25, 100]}\n          component=\"div\"\n          count={filteringData?.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n      </MainCard>\n    </>\n  );\n};\n\nexport default GameQuestionUpload;\n"],"sourceRoot":""}