{"version":3,"sources":["ui-component/cards/Skeleton/EarningCard.js","assets/images/icons/earning.svg","views/dashboard/Default/EarningCard.js","views/dashboard/Default/AnalyticsData.js","views/dashboard/Default/AnalyticsLightData.js","views/dashboard/Default/chart-data/total-order-month-line-chart.js","views/dashboard/Default/chart-data/total-order-year-line-chart.js","views/dashboard/Default/TotalOrderLineChartCard.js","views/dashboard/Default/index.js"],"names":["EarningCard","Card","CardContent","Grid","container","direction","item","justifyContent","Skeleton","variant","width","height","sx","my","CardWrapper","styled","MainCard","theme","backgroundColor","palette","secondary","dark","color","overflow","position","content","background","borderRadius","top","right","breakpoints","down","opacity","isLoading","analytics","useTheme","useState","anchorEl","setAnchorEl","handleClose","border","Box","p","Avatar","typography","commonAvatar","largeAvatar","mt","src","EarningIcon","alt","mediumAvatar","zIndex","onClick","event","currentTarget","fontSize","Menu","id","keepMounted","open","Boolean","onClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","mr","alignItems","Typography","fontWeight","mb","cursor","smallAvatar","transform","primary","light","warning","chartData","type","options","chart","sparkline","enabled","dataLabels","colors","fill","stroke","curve","yaxis","min","max","tooltip","fixed","x","show","y","title","marker","series","name","data","TotalOrderLineChartCard","timeValue","setTimeValue","handleChangeTime","newValue","Button","disableElevation","size","e","xs","map","dailyPayment","monthlyPayment","visibility","ChartDataMonth","ChartDataYear","Dashboard","setLoading","setAnalytics","useEffect","axios","get","config","apiServer","then","res","Items","spacing","gridSpacing","lg","md","sm"],"mappings":"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","file":"static/js/44.c72f2e4b.chunk.js","sourcesContent":["// material-ui\nimport { Card, CardContent, Grid } from '@mui/material';\nimport Skeleton from '@mui/material/Skeleton';\n\n// ==============================|| SKELETON - EARNING CARD ||============================== //\n\nconst EarningCard = () => (\n    <Card>\n        <CardContent>\n            <Grid container direction=\"column\">\n                <Grid item>\n                    <Grid container justifyContent=\"space-between\">\n                        <Grid item>\n                            <Skeleton variant=\"rectangular\" width={44} height={44} />\n                        </Grid>\n                        <Grid item>\n                            <Skeleton variant=\"rectangular\" width={34} height={34} />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item>\n                    <Skeleton variant=\"rectangular\" sx={{ my: 2 }} height={40} />\n                </Grid>\n                <Grid item>\n                    <Skeleton variant=\"rectangular\" height={30} />\n                </Grid>\n            </Grid>\n        </CardContent>\n    </Card>\n);\n\nexport default EarningCard;\n","export default __webpack_public_path__ + \"static/media/earning.b019e86a.svg\";","import PropTypes from \"prop-types\";\nimport { useState } from \"react\";\n\n// material-ui\nimport { styled, useTheme } from \"@mui/material/styles\";\nimport { Avatar, Box, Grid, Menu, MenuItem, Typography } from \"@mui/material\";\n\n// project imports\nimport MainCard from \"ui-component/cards/MainCard\";\nimport SkeletonEarningCard from \"ui-component/cards/Skeleton/EarningCard\";\n\n// assets\nimport EarningIcon from \"assets/images/icons/earning.svg\";\nimport MoreHorizIcon from \"@mui/icons-material/MoreHoriz\";\nimport ArrowUpwardIcon from \"@mui/icons-material/ArrowUpward\";\nimport GetAppTwoToneIcon from \"@mui/icons-material/GetAppOutlined\";\nimport FileCopyTwoToneIcon from \"@mui/icons-material/FileCopyOutlined\";\nimport PictureAsPdfTwoToneIcon from \"@mui/icons-material/PictureAsPdfOutlined\";\nimport ArchiveTwoToneIcon from \"@mui/icons-material/ArchiveOutlined\";\n\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\n  backgroundColor: theme.palette.secondary.dark,\n  color: \"#fff\",\n  overflow: \"hidden\",\n  position: \"relative\",\n  \"&:after\": {\n    content: '\"\"',\n    position: \"absolute\",\n    width: 210,\n    height: 210,\n    background: theme.palette.secondary[800],\n    borderRadius: \"50%\",\n    top: -85,\n    right: -95,\n    [theme.breakpoints.down(\"sm\")]: {\n      top: -105,\n      right: -140,\n    },\n  },\n  \"&:before\": {\n    content: '\"\"',\n    position: \"absolute\",\n    width: 210,\n    height: 210,\n    background: theme.palette.secondary[800],\n    borderRadius: \"50%\",\n    top: -125,\n    right: -15,\n    opacity: 0.5,\n    [theme.breakpoints.down(\"sm\")]: {\n      top: -155,\n      right: -70,\n    },\n  },\n}));\n\n// ===========================|| DASHBOARD DEFAULT - EARNING CARD ||=========================== //\n\nconst EarningCard = ({ isLoading, analytics }) => {\n  const theme = useTheme();\n\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <SkeletonEarningCard />\n      ) : (\n        <CardWrapper border={false} content={false}>\n          <Box sx={{ p: 2.25 }}>\n            <Grid container direction=\"column\">\n              <Grid item>\n                <Grid container justifyContent=\"space-between\">\n                  <Grid item>\n                    <Avatar\n                      variant=\"rounded\"\n                      sx={{\n                        ...theme.typography.commonAvatar,\n                        ...theme.typography.largeAvatar,\n                        backgroundColor: theme.palette.secondary[800],\n                        mt: 1,\n                      }}\n                    >\n                      <img src={EarningIcon} alt=\"Notification\" />\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar\n                      variant=\"rounded\"\n                      sx={{\n                        ...theme.typography.commonAvatar,\n                        ...theme.typography.mediumAvatar,\n                        backgroundColor: theme.palette.secondary.dark,\n                        color: theme.palette.secondary[200],\n                        zIndex: 1,\n                      }}\n                      aria-controls=\"menu-earning-card\"\n                      aria-haspopup=\"true\"\n                      onClick={handleClick}\n                    >\n                      <MoreHorizIcon fontSize=\"inherit\" />\n                    </Avatar>\n                    <Menu\n                      id=\"menu-earning-card\"\n                      anchorEl={anchorEl}\n                      keepMounted\n                      open={Boolean(anchorEl)}\n                      onClose={handleClose}\n                      variant=\"selectedMenu\"\n                      anchorOrigin={{\n                        vertical: \"bottom\",\n                        horizontal: \"right\",\n                      }}\n                      transformOrigin={{\n                        vertical: \"top\",\n                        horizontal: \"right\",\n                      }}\n                    >\n                      <MenuItem onClick={handleClose}>\n                        <GetAppTwoToneIcon sx={{ mr: 1.75 }} /> Import Card\n                      </MenuItem>\n                      <MenuItem onClick={handleClose}>\n                        <FileCopyTwoToneIcon sx={{ mr: 1.75 }} /> Copy Data\n                      </MenuItem>\n                      <MenuItem onClick={handleClose}>\n                        <PictureAsPdfTwoToneIcon sx={{ mr: 1.75 }} /> Export\n                      </MenuItem>\n                      <MenuItem onClick={handleClose}>\n                        <ArchiveTwoToneIcon sx={{ mr: 1.75 }} /> Archive File\n                      </MenuItem>\n                    </Menu>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item>\n                <Grid container alignItems=\"center\">\n                  <Grid item>\n                    <Typography\n                      sx={{\n                        fontSize: \"2.125rem\",\n                        fontWeight: 500,\n                        mr: 1,\n                        mt: 1.75,\n                        mb: 0.75,\n                      }}\n                    >\n                      {/* ${analytics.map((item) => item.totalPayment)} */}\n                    </Typography>\n                  </Grid>\n                  <Grid item>\n                    <Avatar\n                      sx={{\n                        cursor: \"pointer\",\n                        ...theme.typography.smallAvatar,\n                        backgroundColor: theme.palette.secondary[200],\n                        color: theme.palette.secondary.dark,\n                      }}\n                    >\n                      <ArrowUpwardIcon\n                        fontSize=\"inherit\"\n                        sx={{ transform: \"rotate3d(1, 1, 1, 45deg)\" }}\n                      />\n                    </Avatar>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item sx={{ mb: 1.25 }}>\n                <Typography\n                  sx={{\n                    fontSize: \"1rem\",\n                    fontWeight: 500,\n                    color: theme.palette.secondary[200],\n                  }}\n                >\n                  Total Payment\n                </Typography>\n              </Grid>\n            </Grid>\n          </Box>\n        </CardWrapper>\n      )}\n    </>\n  );\n};\n\nEarningCard.propTypes = {\n  isLoading: PropTypes.bool,\n};\n\nexport default EarningCard;\n","import PropTypes from \"prop-types\";\n\n// material-ui\nimport { styled } from \"@mui/material/styles\";\nimport {IconUsers} from \"@tabler/icons\";\nimport {\n\n  Box,\n  \n  Typography,\n} from \"@mui/material\";\n\n// project imports\nimport MainCard from \"ui-component/cards/MainCard\";\nimport TotalIncomeCard from \"ui-component/cards/Skeleton/TotalIncomeCard\";\n\n// assets\n// import TableChartOutlinedIcon from \"@mui/icons-material/TableChartOutlined\";\n\n// styles\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\n  backgroundColor: theme.palette.primary.dark,\n  color: theme.palette.primary.light,\n  overflow: \"hidden\",\n  position: \"relative\",\n  \"&:after\": {\n    content: '\"\"',\n    position: \"absolute\",\n    width: 210,\n    height: 210,\n    background: `linear-gradient(210.04deg, ${theme.palette.primary[200]} -50.94%, rgba(144, 202, 249, 0) 83.49%)`,\n    borderRadius: \"50%\",\n    top: -30,\n    right: -180,\n  },\n  \"&:before\": {\n    content: '\"\"',\n    position: \"absolute\",\n    width: 210,\n    height: 210,\n    background: `linear-gradient(140.9deg, ${theme.palette.primary[200]} -14.02%, rgba(144, 202, 249, 0) 77.58%)`,\n    borderRadius: \"50%\",\n    top: -160,\n    right: -130,\n  },\n}));\n\n// ==============================|| DASHBOARD - TOTAL INCOME DARK CARD ||============================== //\n\nconst AnalyticsData = ({ isLoading,name,value }) => {\n  return (\n    <>\n      {isLoading ? (\n        <TotalIncomeCard />\n      ) : (\n        <CardWrapper border={false} content={false} style={{marginTop:\"25px\"}}>\n            <Box sx={{ p: 2,display:\"flex\",alignItems:\"center\" }}>\n              <IconUsers />\n            <Typography variant=\"h4\" sx={{ color: \"#fff\", p: 2 }}>\n              {name}: {value}\n            </Typography>\n          </Box>\n        </CardWrapper>\n      )}\n    </>\n  );\n};\n\nAnalyticsData.propTypes = {\n  isLoading: PropTypes.bool,\n};\n\nexport default AnalyticsData;\n","import PropTypes from \"prop-types\";\n\n// material-ui\nimport { styled } from \"@mui/material/styles\";\nimport {\n  Box,\n  Typography,\n} from \"@mui/material\";\nimport { IconUsers } from \"@tabler/icons\";\n// project imports\nimport MainCard from \"ui-component/cards/MainCard\";\nimport TotalIncomeCard from \"ui-component/cards/Skeleton/TotalIncomeCard\";\n\n// assets\n// import StorefrontTwoToneIcon from \"@mui/icons-material/StorefrontTwoTone\";\n\n// styles\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\n  overflow: \"hidden\",\n  position: \"relative\",\n  \"&:after\": {\n    content: '\"\"',\n    position: \"absolute\",\n    width: 210,\n    height: 210,\n    background: `linear-gradient(210.04deg, ${theme.palette.warning.dark} -50.94%, rgba(144, 202, 249, 0) 83.49%)`,\n    borderRadius: \"50%\",\n    top: -30,\n    right: -180,\n  },\n  \"&:before\": {\n    content: '\"\"',\n    position: \"absolute\",\n    width: 210,\n    height: 210,\n    background: `linear-gradient(140.9deg, ${theme.palette.warning.dark} -14.02%, rgba(144, 202, 249, 0) 70.50%)`,\n    borderRadius: \"50%\",\n    top: -160,\n    right: -130,\n  },\n}));\n\n// ==============================|| DASHBOARD - TOTAL INCOME LIGHT CARD ||============================== //\n\nconst TotalIncomeLightCard = ({ isLoading, name, value }) => {\n  return (\n    <>\n      {isLoading ? (\n        <TotalIncomeCard />\n      ) : (\n        <CardWrapper\n          border={false}\n          content={false}\n          style={{ marginTop: \"25px\" }}\n        >\n          <Box sx={{ p: 2, display: \"flex\", alignItems: \"center\" }}>\n            <IconUsers />\n            <Typography variant=\"h4\" sx={{ color: \"#000\", p: 2 }}>\n              {name}: {value}\n            </Typography>\n          </Box>\n        </CardWrapper>\n      )}\n    </>\n  );\n};\n\nTotalIncomeLightCard.propTypes = {\n  isLoading: PropTypes.bool,\n};\n\nexport default TotalIncomeLightCard;\n","// ===========================|| DASHBOARD - TOTAL ORDER MONTH CHART ||=========================== //\n\nconst chartData = {\n  type: \"line\",\n  height: 90,\n  options: {\n    chart: {\n      sparkline: {\n        enabled: true,\n      },\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    colors: [\"#fff\"],\n    fill: {\n      type: \"solid\",\n      opacity: 1,\n    },\n    stroke: {\n      curve: \"smooth\",\n      width: 3,\n    },\n    yaxis: {\n      min: 0,\n      max: 100,\n    },\n    tooltip: {\n      theme: \"dark\",\n      fixed: {\n        enabled: false,\n      },\n      x: {\n        show: false,\n      },\n      y: {\n        title: \"Total Payment\",\n      },\n      marker: {\n        show: false,\n      },\n    },\n  },\n  series: [\n    {\n      name: \"series1\",\n      data: [45, 66, 41, 89, 25, 44, 9, 54],\n    },\n  ],\n};\n\nexport default chartData;\n","// ===========================|| DASHBOARD - TOTAL ORDER YEAR CHART ||=========================== //\n\nconst chartData = {\n    type: 'line',\n    height: 90,\n    options: {\n        chart: {\n            sparkline: {\n                enabled: true\n            }\n        },\n        dataLabels: {\n            enabled: false\n        },\n        colors: ['#fff'],\n        fill: {\n            type: 'solid',\n            opacity: 1\n        },\n        stroke: {\n            curve: 'smooth',\n            width: 3\n        },\n        yaxis: {\n            min: 0,\n            max: 100\n        },\n        tooltip: {\n            theme: 'dark',\n            fixed: {\n                enabled: false\n            },\n            x: {\n                show: false\n            },\n            y: {\n                title: 'Total Order'\n            },\n            marker: {\n                show: false\n            }\n        }\n    },\n    series: [\n        {\n            name: 'series1',\n            data: [35, 44, 9, 54, 45, 66, 41, 69]\n        }\n    ]\n};\n\nexport default chartData;\n","// assets\nimport LocalMallOutlinedIcon from \"@mui/icons-material/LocalMallOutlined\";\nimport { Avatar, Box, Button, Grid, Typography } from \"@mui/material\";\n// material-ui\nimport { styled, useTheme } from \"@mui/material/styles\";\nimport PropTypes from \"prop-types\";\nimport { useState } from \"react\";\n// third-party\nimport Chart from \"react-apexcharts\";\n// project imports\nimport MainCard from \"ui-component/cards/MainCard\";\nimport SkeletonTotalOrderCard from \"ui-component/cards/Skeleton/EarningCard\";\nimport ChartDataMonth from \"./chart-data/total-order-month-line-chart\";\nimport ChartDataYear from \"./chart-data/total-order-year-line-chart\";\n\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\n  backgroundColor: theme.palette.primary.dark,\n  color: \"#fff\",\n  overflow: \"hidden\",\n  position: \"relative\",\n  \"&>div\": {\n    position: \"relative\",\n    zIndex: 5,\n  },\n  \"&:after\": {\n    content: '\"\"',\n    position: \"absolute\",\n    width: 210,\n    height: 210,\n    background: theme.palette.primary[800],\n    borderRadius: \"50%\",\n    zIndex: 1,\n    top: -85,\n    right: -95,\n    [theme.breakpoints.down(\"sm\")]: {\n      top: -105,\n      right: -140,\n    },\n  },\n  \"&:before\": {\n    content: '\"\"',\n    position: \"absolute\",\n    zIndex: 1,\n    width: 210,\n    height: 210,\n    background: theme.palette.primary[800],\n    borderRadius: \"50%\",\n    top: -125,\n    right: -15,\n    opacity: 0.5,\n    [theme.breakpoints.down(\"sm\")]: {\n      top: -155,\n      right: -70,\n    },\n  },\n}));\n\n// ==============================|| DASHBOARD - TOTAL ORDER LINE CHART CARD ||============================== //\n\nconst TotalOrderLineChartCard = ({ isLoading, analytics }) => {\n  const theme = useTheme();\n\n  const [timeValue, setTimeValue] = useState(true);\n  const handleChangeTime = (event, newValue) => {\n    setTimeValue(newValue);\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <SkeletonTotalOrderCard />\n      ) : (\n        <CardWrapper border={false} content={false}>\n          <Box sx={{ p: 2.25 }}>\n            <Grid container direction=\"column\">\n              <Grid item>\n                <Grid container justifyContent=\"space-between\">\n                  <Grid item>\n                    <Avatar\n                      variant=\"rounded\"\n                      sx={{\n                        ...theme.typography.commonAvatar,\n                        ...theme.typography.largeAvatar,\n                        backgroundColor: theme.palette.primary[800],\n                        color: \"#fff\",\n                        mt: 1,\n                      }}\n                    >\n                      <LocalMallOutlinedIcon fontSize=\"inherit\" />\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Button\n                      disableElevation\n                      variant={timeValue ? \"contained\" : \"text\"}\n                      size=\"small\"\n                      sx={{ color: \"inherit\" }}\n                      onClick={(e) => handleChangeTime(e, true)}\n                    >\n                      Daily\n                    </Button>\n                    <Button\n                      disableElevation\n                      variant={!timeValue ? \"contained\" : \"text\"}\n                      size=\"small\"\n                      sx={{ color: \"inherit\" }}\n                      onClick={(e) => handleChangeTime(e, false)}\n                    >\n                      Monthly\n                    </Button>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item sx={{ mb: 0.75 }}>\n                <Grid container alignItems=\"center\">\n                  <Grid item xs={6}>\n                    <Grid container alignItems=\"center\">\n                      <Grid item>\n                        {timeValue ? (\n                          <>\n                            <Typography\n                              sx={{\n                                fontSize: \"2.125rem\",\n                                fontWeight: 500,\n                                mr: 1,\n                                mt: 1.75,\n                                mb: 0.75,\n                              }}\n                            >\n                              ${analytics.map((item) => item.dailyPayment)}\n                            </Typography>\n                            <Grid item xs={12}>\n                              <Typography\n                                sx={{\n                                  fontSize: \"1rem\",\n                                  fontWeight: 500,\n                                  color: theme.palette.primary[200],\n                                }}\n                              >\n                                Daily Payment\n                              </Typography>\n                            </Grid>{\" \"}\n                          </>\n                        ) : (\n                          <>\n                            <Typography\n                              sx={{\n                                fontSize: \"2.125rem\",\n                                fontWeight: 500,\n                                mr: 1,\n                                mt: 1.75,\n                                mb: 0.75,\n                              }}\n                            >\n                              ${analytics.map((item) => item.monthlyPayment)}\n                            </Typography>\n                            <Grid item></Grid>\n                            <Grid item xs={12}>\n                              <Typography\n                                sx={{\n                                  fontSize: \"1rem\",\n                                  fontWeight: 500,\n                                  color: theme.palette.primary[200],\n                                }}\n                              >\n                                Monthly Payment\n                              </Typography>\n                            </Grid>\n                          </>\n                        )}\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Box sx={{ visibility: \"hidden\" }}>\n                      {timeValue ? (\n                        <Chart {...ChartDataMonth} />\n                      ) : (\n                        <Chart {...ChartDataYear} />\n                      )}\n                    </Box>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Box>\n        </CardWrapper>\n      )}\n    </>\n  );\n};\n\nTotalOrderLineChartCard.propTypes = {\n  isLoading: PropTypes.bool,\n};\n\nexport default TotalOrderLineChartCard;\n","import { useEffect, useState } from \"react\";\n\n// material-ui\nimport { Grid } from \"@mui/material\";\n\n// project imports\nimport EarningCard from \"./EarningCard\";\n// import PopularCard from './PopularCard';\nimport AnalyticsData from \"./AnalyticsData\";\nimport AnalyticsLightData from \"./AnalyticsLightData\";\nimport TotalOrderLineChartCard from \"./TotalOrderLineChartCard\";\n// import TotalIncomeDarkCard from './TotalIncomeDarkCard';\n// import TotalIncomeLightCard from './TotalIncomeLightCard';\n// import TotalGrowthBarChart from './TotalGrowthBarChart';\nimport { gridSpacing } from \"store/constant\";\nimport config from \"config\";\nimport axios from \"axios\";\n\n// ==============================|| DEFAULT DASHBOARD ||============================== //\n\nconst Dashboard = () => {\n  const [isLoading, setLoading] = useState(true);\n  const [analytics, setAnalytics] = useState([]);\n\n  useEffect(() => {\n    axios.get(`${config.apiServer}/analytics`).then((res) => {\n      if (res.data?.Items) {\n        setAnalytics(res.data?.Items);\n      }\n      setLoading(false);\n    });\n  }, []);\n\n  return (\n    <Grid container spacing={gridSpacing}>\n      <Grid item xs={12}>\n        <Grid container spacing={gridSpacing}>\n          <Grid item lg={4} md={6} sm={6} xs={12}>\n            <EarningCard isLoading={isLoading} analytics={analytics} />\n          </Grid>\n          <Grid item lg={4} md={6} sm={6} xs={12}>\n            <TotalOrderLineChartCard\n              isLoading={isLoading}\n              analytics={analytics}\n            />\n          </Grid>\n          <Grid item lg={4} md={12} sm={12} xs={12}>\n            <Grid container spacing={gridSpacing}>\n              {/* <Grid item sm={6} xs={12} md={6} lg={12}>\n                  <TotalIncomeDarkCard isLoading={isLoading} />\n                </Grid>\n                <Grid item sm={6} xs={12} md={6} lg={12}>\n                  <TotalIncomeLightCard isLoading={isLoading} />\n                </Grid> */}\n              {/* {analytics.map((analytic, index) => {\n                  console.log(\"ANALYTICS\",analytic);\n                  return (\n                    <Grid item xs={12} md={12} key={index}>\n                      <AnalyticsData\n                        name=\"New User\"\n                        value={analytic.newUser}\n                        isLoading={isLoading}\n                      />\n                      <AnalyticsLightData\n                        name=\"Guest User\"\n                        value={analytic.guestUser}\n                        isLoading={isLoading}\n                      />\n                      <AnalyticsData\n                        name=\"Verified User\"\n                        value={analytic.verfiedUser}\n                        isLoading={isLoading}\n                      />\n                      <AnalyticsLightData\n                        name=\"Total User\"\n                        value={analytic.totalUser}\n                        isLoading={isLoading}\n                      />\n                    </Grid>\n                  );\n                })} */}\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={12}>\n        <Grid container spacing={gridSpacing}>\n          {/* {analytics.map((analytic, index) => {\n              return (\n                <Grid item xs={12} md={12} key={index}>\n                  <AnalyticsData\n                    name=\"New User\"\n                    value={analytic.newUser}\n                    isLoading={isLoading}\n                  />\n                  <AnalyticsLightData\n                    name=\"Guest User\"\n                    value={analytic.guestUser}\n                    isLoading={isLoading}\n                  />\n                  <AnalyticsData\n                    name=\"Verified User\"\n                    value={analytic.verfiedUser}\n                    isLoading={isLoading}\n                  />\n                  <AnalyticsLightData\n                    name=\"Total User\"\n                    value={analytic.totalUser}\n                    isLoading={isLoading}\n                  />\n                </Grid>\n              );\n            })} */}\n          {/* <Grid item xs={12} md={8}>\n                        <TotalGrowthBarChart isLoading={isLoading} />\n                    </Grid> */}\n          {/* <Grid item xs={12} md={4}>\n                        <PopularCard isLoading={isLoading} />\n                    </Grid> */}\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Dashboard;\n"],"sourceRoot":""}