{"version":3,"sources":["views/coinManagement/editCoin/editCoin.js","views/coinManagement/list/index.js"],"names":["style","position","top","left","transform","width","bgcolor","boxShadow","p","EditCoin","open","handleClose","singleReward","pageReload","setPageReload","initialValues","coinName","coin","amount","validationSchema","Yup","required","Modal","onClose","Box","sx","onSubmit","values","tempData","name","Number","fetch","config","apiServer","id","method","headers","body","JSON","stringify","then","res","json","data","swal","catch","error","field","meta","TextField","touched","label","placeholder","variant","color","margin","Button","type","useStyles","makeStyles","theme","table","minWidth","tableContainer","borderRadius","tableHeaderCell","fontWeight","palette","secondary","main","fontSize","CoinList","useState","setOpen","coinData","setCoinData","singleCoin","setSingleCoin","page","setPage","rowsPerPage","setRowsPerPage","classes","useEffect","temp","i","length","updateData","sl","push","handleEdit","v","find","MainCard","title","Paper","TableContainer","component","className","Table","TableHead","TableRow","TableCell","align","TableBody","slice","map","row","index","scope","onClick","text","icon","buttons","dangerMode","willDelete","remainingCoin","filter","TablePagination","rowsPerPageOptions","count","onPageChange","event","newPage","onRowsPerPageChange","target","value"],"mappings":"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","file":"static/js/29.f232293f.chunk.js","sourcesContent":["import { TextField } from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Modal from \"@mui/material/Modal\";\nimport config from \"config\";\nimport { Field, Form, Formik } from \"formik\";\nimport PropTypes from \"prop-types\";\nimport * as React from \"react\";\nimport swal from \"sweetalert\";\nimport * as Yup from \"yup\";\nimport \"./index.css\";\n\nconst style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: 400,\n    bgcolor: \"background.paper\",\n    boxShadow: 24,\n    p: 4,\n};\n\nconst EditCoin = ({\n    open,\n    handleClose,\n    singleReward,\n    pageReload,\n    setPageReload,\n}) => {\n    const initialValues = {\n        coinName: singleReward?.coinName === null ? \"\" : singleReward?.coinName,\n        coin: singleReward?.coin === null ? \"\" : singleReward?.coin,\n        amount: singleReward?.amount === null ? \"\" : singleReward?.amount,\n    };\n    const validationSchema = Yup.object({\n        coinName: Yup.string().required(\"required field\"),\n        coin: Yup.number().required(\"required field\"),\n        amount: Yup.number().required(\"required field\"),\n    });\n\n    const onSubmit = (values) => {\n        const tempData = {\n            name: values.coinName,\n            coin: Number(values.coin),\n            amount: Number(values.amount),\n        };\n\n        fetch(`${config.apiServer}/coin/${singleReward.id}/edit-coin`, {\n            method: \"PUT\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify(tempData),\n        })\n            .then((res) => res.json())\n            .then((data) => {\n                if (data) {\n                    handleClose();\n                    swal(\"Update Successfully\");\n                    setPageReload(!pageReload);\n                }\n            })\n            .catch((error) => {\n                swal(\"Error!\", \"Something went wrong\", \"wrong\");\n            });\n    };\n\n    return (\n        <div>\n            <Modal\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n            >\n                <Box sx={style}>\n                    <Formik\n                        initialValues={initialValues}\n                        onSubmit={onSubmit}\n                        validationSchema={validationSchema}\n                    >\n                        <Form>\n                            <Field name=\"coinName\">\n                                {({ field, meta }) => {\n                                    return (\n                                        <TextField\n                                            error={\n                                                meta.touched && meta.error\n                                                    ? true\n                                                    : false\n                                            }\n                                            id=\"coinName\"\n                                            label={`Name of Package ${\n                                                meta.touched && meta.error\n                                                    ? \"*\"\n                                                    : \"\"\n                                            }`}\n                                            sx={{ width: 1 }}\n                                            placeholder=\"Text only\"\n                                            variant=\"outlined\"\n                                            color=\"secondary\"\n                                            name=\"coinName\"\n                                            margin=\"normal\"\n                                            style={{ width: \"100%\" }}\n                                            {...field}\n                                        />\n                                    );\n                                }}\n                            </Field>\n                            <Field name=\"coin\">\n                                {({ field, meta }) => {\n                                    return (\n                                        <TextField\n                                            error={\n                                                meta.touched && meta.error\n                                                    ? true\n                                                    : false\n                                            }\n                                            id=\"coin\"\n                                            label={`Number of Coins ${\n                                                meta.touched && meta.error\n                                                    ? \"*\"\n                                                    : \"\"\n                                            }`}\n                                            sx={{ width: 1 }}\n                                            placeholder=\"Number only\"\n                                            variant=\"outlined\"\n                                            color=\"secondary\"\n                                            name=\"coin\"\n                                            margin=\"normal\"\n                                            style={{ width: \"100%\" }}\n                                            {...field}\n                                        />\n                                    );\n                                }}\n                            </Field>\n                            <Field name=\"amount\">\n                                {({ field, meta }) => {\n                                    return (\n                                        <TextField\n                                            error={\n                                                meta.touched && meta.error\n                                                    ? true\n                                                    : false\n                                            }\n                                            id=\"amount\"\n                                            label={`Price ${\n                                                meta.touched && meta.error\n                                                    ? \"*\"\n                                                    : \"\"\n                                            }`}\n                                            sx={{ width: 1 }}\n                                            placeholder=\"Number only\"\n                                            variant=\"outlined\"\n                                            color=\"secondary\"\n                                            name=\"amount\"\n                                            margin=\"normal\"\n                                            style={{ width: \"100%\" }}\n                                            {...field}\n                                        />\n                                    );\n                                }}\n                            </Field>\n                            <Button\n                                type=\"submit\"\n                                variant=\"contained\"\n                                color=\"secondary\"\n                            >\n                                Update\n                            </Button>\n                        </Form>\n                    </Formik>\n                </Box>\n            </Modal>\n        </div>\n    );\n};\n\nexport default EditCoin;\nEditCoin.propTypes = {\n    open: PropTypes.any,\n    handleClose: PropTypes.any,\n    singleReward: PropTypes.any,\n    // setPageReload: PropTypes.any,\n    // singleImage: PropTypes.any,\n    // pageReload: PropTypes.any\n};\n","import {\n  Button,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n} from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { IconEdit, IconTrash } from \"@tabler/icons\";\nimport config from \"config\";\nimport { useEffect, useState } from \"react\";\nimport swal from \"sweetalert\";\nimport MainCard from \"ui-component/cards/MainCard\";\nimport EditCoin from \"../editCoin/editCoin\";\n// import EditReward from \"../edit\";\n\nconst useStyles = makeStyles((theme) => ({\n  table: {\n    minWidth: 650,\n  },\n  tableContainer: {\n    borderRadius: 15,\n  },\n  tableHeaderCell: {\n    \"& .MuiTableCell-head\": {\n      fontWeight: 700,\n      color: theme.palette.secondary.main,\n      fontSize: 16,\n    },\n  },\n}));\n\nconst CoinList = () => {\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  const [coinData, setCoinData] = useState([]);\n  const [singleCoin, setSingleCoin] = useState({});\n  const [pageReload, setPageReload] = useState(false);\n\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const classes = useStyles();\n\n  // get all coin\n  useEffect(() => {\n    fetch(`${config.apiServer}/coin/getCoinWallets`)\n      .then((res) => res.json())\n      .then((data) => {\n        const temp = [];\n\n        for (let i = 0; i < data.length; i += 1) {\n          const updateData = data[i];\n          updateData.sl = i + 1;\n          temp.push(updateData);\n        }\n        setCoinData(temp);\n      });\n  }, [pageReload]);\n\n  const handleDelete = (id) => {\n    swal({\n      title: \"Are you sure?\",\n      text: \"You Want to Delete\",\n      icon: \"warning\",\n      buttons: true,\n      dangerMode: true,\n    }).then((willDelete) => {\n      if (willDelete) {\n        fetch(`${config.apiServer}/coin/${id}/delete-coin`, {\n          method: \"DELETE\",\n          headers: {\n            \"content-type\": \"application/json\",\n          },\n          body: JSON.stringify({ id }),\n        })\n          .then((res) => res.json())\n          .then((data) => {\n            if (data) {\n              swal(\"Delete Successfully\");\n              const remainingCoin = coinData?.filter((coin) => coin.id !== id);\n              setCoinData(remainingCoin);\n            }\n          });\n      } else {\n        swal(\"Your file is safe!\");\n      }\n    });\n  };\n\n  const handleEdit = (id) => {\n    handleOpen();\n    const v = coinData.find((coin) => coin.id === id);\n    setSingleCoin(v);\n  };\n\n  return (\n    <>\n      <MainCard title=\"Coin Package View\">\n        <Paper>\n          <TableContainer component={Paper} className={classes.tableContainer}>\n            <Table className={classes.table} aria-label=\"simple table\">\n              <TableHead>\n                <TableRow className={classes.tableHeaderCell}>\n                  <TableCell align=\"center\">Sr.No</TableCell>\n                  <TableCell align=\"center\">Coin Package Name</TableCell>\n                  <TableCell align=\"center\">Number of Coins</TableCell>\n                  <TableCell align=\"center\">Price</TableCell>\n                  <TableCell align=\"center\">Action</TableCell>\n                </TableRow>\n              </TableHead>\n\n              <TableBody>\n                {coinData\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                  .map((row, index) => (\n                    // eslint-disable-next-line no-underscore-dangle\n                    <TableRow key={index}>\n                      <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                        {/* eslint-disable-next-line no-underscore-dangle */}\n                        {row?.sl}\n                      </TableCell>\n                      <TableCell align=\"center\">{row.coinName}</TableCell>\n                      <TableCell align=\"center\">{row.coin}</TableCell>\n                      <TableCell align=\"center\">{row.amount}</TableCell>\n                      <TableCell align=\"center\">\n                        <Button\n                          color=\"secondary\"\n                          onClick={() => handleEdit(row.id)}\n                        >\n                          {<IconEdit />}\n                        </Button>\n                        <Button\n                          color=\"secondary\"\n                          onClick={() => handleDelete(row.id)}\n                        >\n                          {<IconTrash />}\n                        </Button>\n                        <EditCoin\n                          open={open}\n                          handleClose={handleClose}\n                          singleReward={singleCoin}\n                          pageReload={pageReload}\n                          setPageReload={setPageReload}\n                        />\n                      </TableCell>\n                    </TableRow>\n                  ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n\n          <TablePagination\n            rowsPerPageOptions={[5, 10, 25, 100]}\n            component=\"div\"\n            count={coinData.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onPageChange={handleChangePage}\n            onRowsPerPageChange={handleChangeRowsPerPage}\n          />\n        </Paper>\n      </MainCard>\n    </>\n  );\n};\n\nexport default CoinList;\n"],"sourceRoot":""}