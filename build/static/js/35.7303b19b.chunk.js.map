{"version":3,"sources":["views/Exercise/QuestionUpload/QuestionUpload.js"],"names":["UpdateModal","React","lazy","useStyles","makeStyles","theme","table","minWidth","tableContainer","borderRadius","tableHeaderCell","fontWeight","color","palette","secondary","main","fontSize","QuestionUpload","useState","allSubAndGrades","setAllSubAndGrades","page","setPage","rowsPerPage","setRowsPerPage","subCategory","setSubCategory","id","setId","grade","setGrade","callData","setCallData","singleQuestion","setSingleQuestion","formErrors","setFormErrors","open","setOpen","handleClose","classes","useEffect","fetch","config","apiServer","then","res","json","data","temp","subcategoryData","Items","i","length","d","sl","push","catch","err","swal","title","text","icon","buttons","dangerMode","handleEdit","Object","keys","onSubmit","event","preventDefault","container","rowSpacing","columnSpacing","xs","sm","md","item","fullWidth","error","labelId","value","label","onChange","target","map","subCategoryName","disabled","subCategoryGrades","index","sx","textAlign","mt","variant","type","mx","onClick","component","Paper","className","align","slice","allSubAndGrade","width","level","question","parse","option1","option2","option3","option4","correctAnswer","fallback","e","willDelete","console","log","method","headers","handleDelete","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange"],"mappings":"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","file":"static/js/35.7303b19b.chunk.js","sourcesContent":["import { Button, FormControl, Grid, InputLabel, MenuItem, Select } from \"@mui/material\";\nimport React, { Suspense } from \"react\";\nimport MainCard from \"ui-component/cards/MainCard\";\nimport config from 'config'\nimport { makeStyles } from \"@mui/styles\";\nimport swal from \"sweetalert\";\nimport parse from \"html-react-parser\";\nimport {\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  FormHelperText,\n  TablePagination,\n  TableRow,\n} from \"@mui/material\";\nimport { IconEdit, IconTrash } from \"@tabler/icons\";\n// import UpdateModal from \"./UpdateModal\";\nconst UpdateModal = React.lazy(() => import(\"./UpdateModal\"));\n// mui style component\nconst useStyles = makeStyles((theme) => ({\n  table: {\n    minWidth: 650,\n  },\n  tableContainer: {\n    borderRadius: 15,\n  },\n  tableHeaderCell: {\n    \"& .MuiTableCell-head\": {\n      fontWeight: 700,\n      color: theme.palette.secondary.main,\n      fontSize: 16,\n    },\n  },\n}));\nconst QuestionUpload = () => {\n  //state\n  const [allSubAndGrades, setAllSubAndGrades] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [subCategory, setSubCategory] = React.useState([]);\n  const [id, setId] = React.useState(\"\");\n  const [grade, setGrade] = React.useState(\"\");\n  const [callData, setCallData] = React.useState(false);\n  const [singleQuestion, setSingleQuestion] = React.useState({});\n  const [formErrors, setFormErrors] = React.useState({\n    id:\"\"\n   \n  });\n//modal\n  const [open, setOpen] = React.useState(false);\n   const handleOpen = () => setOpen(true);\n   const handleClose = () => setOpen(false);\n\n  //pagination\n    const handleChangePage = (event, newPage) => {\n      setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n      setRowsPerPage(+event.target.value);\n      setPage(0);\n    };\n  const classes = useStyles();\n  \n\n  //all question view\n    React.useEffect(() => {\n      fetch(\n        `${config.apiServer}/excercise/getAllExcerciseByGameCategoryAndGrade/1NsQnbDwUw1Cbdgbr50j/5`\n      )\n        .then((res) => res.json())\n        .then((data) => {\n          const temp = [];\n          const subcategoryData = data.Items;\n          for (let i = 0; i < subcategoryData.length; i += 1) {\n            const d = subcategoryData[i];\n            d.sl = i + 1;\n            temp.push(d);\n          }\n          setAllSubAndGrades(temp);\n        })\n        .catch((err) => {\n          swal({\n            title: \"Error\",\n            text: \"Something went wrong\",\n            icon: \"error\",\n            buttons: true,\n          });\n        });\n    }, [callData]);\n\n  \n  //all subcategory name,grade \n  React.useEffect(() => {\n    fetch(`${config.apiServer}/category/getAllSubCategories`)\n      .then((res) => res.json())\n      .then((data) => {\n        setSubCategory(data?.Items);\n      })\n      .catch((err) =>\n        swal({\n          title: \"Error\",\n          text: \"Something went wrong\",\n          icon: \"error\",\n          buttons: true,\n          dangerMode: true,\n        })\n      );\n  }, []);\n\n  const handleChange = (event) => { \n    // console.log(event.target.value);\n    setId(event.target.value);\n  }\n  const handleChangeGarde = (event) => { \n    setGrade(event.target.value);\n  }\n\n\n  //filtering data get\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (id === \"\") {\n      setFormErrors({\n        id: \"Please select a game\",\n        \n      });\n    } else {\n      setFormErrors({\n        id: \"\",\n        \n        \n      });\n      fetch(\n        `${config.apiServer}/excercise/getAllExcerciseByGameCategoryAndGrade/${id}/${grade}`\n      )\n        .then((res) => res.json())\n        .then((data) => {\n          const temp = [];\n          const subcategoryData = data.Items;\n          for (let i = 0; i < subcategoryData.length; i += 1) {\n            const d = subcategoryData[i];\n            d.sl = i + 1;\n            temp.push(d);\n          }\n          setAllSubAndGrades(temp);\n        })\n        .catch((err) => {\n          swal({\n            title: \"Error\",\n            text: 'Something went wrong',\n            icon: \"error\",\n            buttons: true\n          });\n        })\n    }\n  }\n\n\n  //delete\n  const handleDelete = id => {\n    swal({\n      title: \"Are you sure?\",\n      text: \"Once deleted, you will not be able to recover this!\",\n      icon: \"warning\",\n      buttons: true,\n      dangerMode: true,\n    }).then((willDelete) => {\n      if (willDelete) {\n        console.log(\"delete\");\n        //fetch data\n        fetch(`${config.apiServer}/excercise/deleteExcerciseQuestion/${id}`, {\n          method: \"DELETE\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        })\n          .then((res) => res.json())\n          .then((data) => {\n            if (data) {\n              swal({\n                title: \"Deleted!\",\n                text: \"Your Question has been deleted.\",\n                icon: \"success\",\n                buttons: true,\n              })\n              setCallData(!callData);\n            }\n          })\n          .catch((err) => {\n            swal({\n              title: \"Error\",\n              text: \"Please try again!\",\n              icon: \"error\",\n              buttons: true,\n            });\n          });\n        \n      } else {\n        swal({\n          title: \"Your data is safe!\",\n          text: \"Your data is safe!\",\n          icon: \"success\",\n        });\n      }\n    });\n  };\n\n\n  //reset \n  const handleReset = () => {\n    setCallData(!callData);\n    setId(\"\");\n    setGrade(\"\");\n  }\n\n\n//update\n  const handleEdit = (id) => { \n    handleOpen();\n    // console.log(id);\n    setSingleQuestion({});\n    fetch(`${config.apiServer}/excercise/getexcercise/${id}`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (Object.keys(data).length === 0) { \n          return;\n        }\n        setSingleQuestion(data); \n      })\n      .catch((err) => {\n        swal({\n          title: \"Error!\",\n          text: \"Something went wrong!\",\n          icon: \"error\",\n        });\n        })\n  }\n  return (\n    <>\n      <MainCard title=\"Question Upload\">\n        <form onSubmit={handleSubmit}>\n          <Grid\n            container\n            rowSpacing={1}\n            columnSpacing={{ xs: 1, sm: 2, md: 3 }}\n          >\n            <Grid item xs={12} md={6}>\n              <FormControl fullWidth error={formErrors.id.length > 0}>\n                <InputLabel id=\"demo-simple-select-label\">\n                  Sub-Category\n                </InputLabel>\n                <Select\n                  labelId=\"demo-simple-select-label\"\n                  id=\"demo-simple-select\"\n                  value={id}\n                  label=\"Sub-Category\"\n                  onChange={handleChange}\n                >\n                  {subCategory?.map((item) => (\n                    <MenuItem value={item.id} key={item.id}>\n                      {item?.subCategoryName}\n                    </MenuItem>\n                  ))}\n                </Select>\n                <FormHelperText>\n                  {formErrors.id.length > 0 && <span>{formErrors.id}</span>}\n                </FormHelperText>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <FormControl fullWidth>\n                <InputLabel id=\"demo-simple-select-label\">Grade</InputLabel>\n                <Select\n                  labelId=\"demo-simple-select-label\"\n                  id=\"demo-simple-select\"\n                  value={grade}\n                  label=\"Grade\"\n                  onChange={handleChangeGarde}\n                  disabled={id === \"\"}\n                >\n                  {subCategory?.map(\n                    (item) =>\n                      item?.id === id &&\n                      item?.subCategoryGrades?.map((i, index) => (\n                        <MenuItem value={i} key={index}>\n                          {i}\n                        </MenuItem>\n                      ))\n                  )}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} md={12} sx={{ textAlign: \"center\", mt: 2 }}>\n              <Button variant=\"contained\" color=\"secondary\" type=\"submit\">\n                Submit\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                sx={{ mx: 2 }}\n                onClick={handleReset}\n              >\n                Reset\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n      </MainCard>\n      <MainCard sx={{ mt: 1 }}>\n        {/* table */}\n        <TableContainer component={Paper} className={classes.tableContainer}>\n          <Table className={classes.table} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow className={classes.tableHeaderCell}>\n                {/* <TableCell align=\"center\">Sl. No.</TableCell> */}\n                <TableCell align=\"center\">Grade</TableCell>\n                <TableCell align=\"center\">Level</TableCell>\n                <TableCell align=\"center\">Question</TableCell>\n                <TableCell align=\"center\">Option A</TableCell>\n                <TableCell align=\"center\">Option B</TableCell>\n                <TableCell align=\"center\">Option C</TableCell>\n                <TableCell align=\"center\">Option D</TableCell>\n                <TableCell align=\"center\">Answer</TableCell>\n                <TableCell align=\"center\">Action</TableCell>\n              </TableRow>\n            </TableHead>\n\n            <TableBody>\n              {allSubAndGrades\n                ?.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                ?.map((allSubAndGrade, index) => (\n                  <TableRow key={index}>\n                    <TableCell\n                      sx={{\n                        width: \"10%\",\n                        textAlign: \"center\",\n                      }}\n                    >\n                      {allSubAndGrade?.grade}\n                      {/* {allSubAndGrade?.sl} */}\n                    </TableCell>\n                    <TableCell\n                      sx={{\n                        width: \"10%\",\n                        textAlign: \"center\",\n                      }}\n                    >\n                      {allSubAndGrade?.level}\n                    </TableCell>\n                    <TableCell\n                      sx={{\n                        width: \"30%\",\n                        textAlign: \"center\",\n                      }}\n                    >\n                      {allSubAndGrade?.question?parse?.(allSubAndGrade?.question):\"\"}\n                    </TableCell>\n                    <TableCell\n                      sx={{\n                        width: \"10%\",\n                        textAlign: \"center\",\n                      }}\n                    >\n                      {allSubAndGrade?.option1}\n                    </TableCell>\n                    <TableCell\n                      sx={{\n                        width: \"10%\",\n                        textAlign: \"center\",\n                      }}\n                    >\n                      {allSubAndGrade?.option2}\n                    </TableCell>\n                    <TableCell\n                      sx={{\n                        width: \"10%\",\n                        textAlign: \"center\",\n                      }}\n                    >\n                      {allSubAndGrade?.option3}\n                    </TableCell>\n                    <TableCell\n                      sx={{\n                        width: \"10%\",\n                        textAlign: \"center\",\n                      }}\n                    >\n                      {allSubAndGrade?.option4}\n                    </TableCell>\n                    <TableCell\n                      sx={{\n                        width: \"5%\",\n                        textAlign: \"center\",\n                      }}\n                    >\n                      {allSubAndGrade?.correctAnswer}\n                    </TableCell>\n                    <TableCell\n                      sx={{\n                        width: \"5%\",\n                        textAlign: \"center\",\n                      }}\n                    >\n                      <Button\n                        color=\"secondary\"\n                        onClick={() => handleEdit(allSubAndGrade?.id)}\n                      >\n                        {<IconEdit />}\n                      </Button>\n                      {singleQuestion?.id && (\n                        <Suspense fallback={\"\"}>\n                          <UpdateModal\n                            open={open}\n                            handleClose={handleClose}\n                            singleQuestion={singleQuestion}\n                            setCallData={setCallData}\n                            callData={callData}\n                          />\n                        </Suspense>\n                      )}\n                      <Button\n                        color=\"secondary\"\n                        onClick={(e) => handleDelete(allSubAndGrade?.id)}\n                      >\n                        {<IconTrash />}\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25, 100, 300, 500]}\n          component=\"div\"\n          count={allSubAndGrades.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n      </MainCard>\n    </>\n  );\n};\n\nexport default QuestionUpload;\n"],"sourceRoot":""}