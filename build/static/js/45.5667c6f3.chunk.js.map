{"version":3,"sources":["views/leaderboard/index.js"],"names":["LeaderBoard","useState","time","setTime","data","setData","game","setGame","games","setGames","useEffect","fetch","config","apiServer","then","res","json","leaderboard","tempData","map","transaction","i","index","userName","email","usermail","score","lastUpdatedDate","format","Date","updatedAt","Fragment","title","container","rowSpacing","columnSpacing","xs","sm","md","item","sx","display","justifyContent","color","width","id","labelId","value","label","onChange","e","target","gameDetails","gameName","mt","length","titles","textAlign"],"mappings":"gPAqHeA,UAvGK,WAClB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAA0BN,mBAAS,IAAnC,mBAAOO,EAAP,KAAcC,EAAd,KAQAC,qBAAU,WACRC,MAAM,GAAD,OAAIC,IAAOC,UAAX,oBACFC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACV,GACLK,EAASL,QAEZ,IAGHM,qBAAU,WACRR,GACEI,GACAK,MAAM,GAAD,OAAIC,IAAOC,UAAX,wBAAoCX,EAApC,YAA4CI,IAC9CQ,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACV,GAAD,OAAUC,EAAQD,EAAKa,kBAChC,CAACf,EAAMI,IACV,IAAMY,EAAWd,EAAKe,KAAI,SAACC,EAAaC,GAQtC,MAPa,CACXC,MAAOD,EAAI,EACXE,SAAUH,EAAYG,SACtBC,MAAOJ,EAAYK,SACnBC,MAAON,EAAYM,MACnBC,gBAAiBC,YAAO,IAAIC,KAAKT,EAAYU,WAAY,kBAI7D,OACE,eAAC,IAAMC,SAAP,WACE,cAAC,IAAD,CAAUC,MAAM,eAAhB,SACE,eAAC,IAAD,CAAMC,WAAS,EAACC,WAAY,EAAGC,cAAe,CAAEC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAlE,UACE,cAAC,IAAD,CAAMC,MAAI,EAACH,GAAI,EAAf,SACE,cAAC,IAAD,CAAKI,GAAI,CAAEC,QAAS,OAAQC,eAAgB,UAA5C,SACE,eAAC,IAAD,CAAaC,MAAM,YAAYH,GAAI,CAAEI,MAAO,SAA5C,UACE,cAAC,IAAD,CAAYC,GAAG,2BAAf,kBACA,eAAC,IAAD,CACEC,QAAQ,2BACRD,GAAG,qBACHE,MAAO7C,EACP8C,MAAM,OACNC,SA9CG,SAACC,GAClB/C,EAAQ+C,EAAEC,OAAOJ,QAwCL,UAOE,cAAC,IAAD,CAAUA,MAAM,QAAhB,mBACA,cAAC,IAAD,CAAUA,MAAM,SAAhB,oBACA,cAAC,IAAD,CAAUA,MAAM,WAAhB,iCAKR,cAAC,IAAD,CAAMR,MAAI,EAACH,GAAI,EAAf,SACE,cAAC,IAAD,CAAKI,GAAI,CAAEC,QAAS,OAAQC,eAAgB,UAA5C,SACE,eAAC,IAAD,CAAaC,MAAM,YAAYH,GAAI,CAAEI,MAAO,SAA5C,UACE,cAAC,IAAD,CAAYC,GAAG,2BAAf,uBACA,cAAC,IAAD,CACEC,QAAQ,2BACRD,GAAG,qBACHE,MAAOzC,EACP0C,MAAM,YACNC,SA7DG,SAACC,GAClB3C,EAAQ2C,EAAEC,OAAOJ,QAuDL,SAOGvC,EAAMW,KAAI,SAACiC,GAAD,OACT,cAAC,IAAD,CAA+BL,MAAOK,EAAYP,GAAlD,SACGO,EAAYC,UADAD,EAAYP,qBAWzC,cAAC,IAAD,CAAUb,MAAM,oBAAoBQ,GAAI,CAAEc,GAAI,GAA9C,SACGlD,EAAKmD,OAAS,EACb,cAAC,IAAD,CACEC,OAAQ,CACN,OACA,YACA,QACA,QACA,qBAEFpD,KAAMc,IAGR,cAAC,IAAD,CAAKsB,GAAI,CAAEiB,UAAW,UAAtB","file":"static/js/45.5667c6f3.chunk.js","sourcesContent":["import {\n  Box,\n  FormControl,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n} from \"@mui/material\";\nimport config from \"config\";\nimport { format } from \"date-fns\";\nimport React, { useEffect, useState } from \"react\";\nimport MainCard from \"ui-component/cards/MainCard\";\nimport MainTable from \"ui-component/table/Maintable\";\n\nconst LeaderBoard = () => {\n  const [time, setTime] = useState(\"\");\n  const [data, setData] = useState([]);\n  const [game, setGame] = useState(\"\");\n  const [games, setGames] = useState([]);\n  const handleTime = (e) => {\n    setTime(e.target.value);\n  };\n  const handleGame = (e) => {\n    setGame(e.target.value);\n  };\n  // Load game data\n  useEffect(() => {\n    fetch(`${config.apiServer}/game/get-games`)\n      .then((res) => res.json())\n      .then((data) => {\n        setGames(data);\n      });\n  }, []);\n\n  //   load data by time\n  useEffect(() => {\n    time &&\n      game &&\n      fetch(`${config.apiServer}/leaderboard/${time}/${game}`)\n        .then((res) => res.json())\n        .then((data) => setData(data.leaderboard));\n  }, [time, game]);\n  const tempData = data.map((transaction, i) => {\n    const temp = {\n      index: i + 1,\n      userName: transaction.userName,\n      email: transaction.usermail,\n      score: transaction.score,\n      lastUpdatedDate: format(new Date(transaction.updatedAt), \"dd-MM-yyyy\"),\n    };\n    return temp;\n  });\n  return (\n    <React.Fragment>\n      <MainCard title=\"Leader Board\">\n        <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\n          <Grid item xs={6}>\n            <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n              <FormControl color=\"secondary\" sx={{ width: \"250px\" }}>\n                <InputLabel id=\"demo-simple-select-label\">Time</InputLabel>\n                <Select\n                  labelId=\"demo-simple-select-label\"\n                  id=\"demo-simple-select\"\n                  value={time}\n                  label=\"Time\"\n                  onChange={handleTime}\n                >\n                  <MenuItem value=\"daily\">Daily</MenuItem>\n                  <MenuItem value=\"weekly\">Weekly</MenuItem>\n                  <MenuItem value=\"lifetime\">Life Time</MenuItem>\n                </Select>\n              </FormControl>\n            </Box>\n          </Grid>\n          <Grid item xs={6}>\n            <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n              <FormControl color=\"secondary\" sx={{ width: \"250px\" }}>\n                <InputLabel id=\"demo-simple-select-label\">Game Type</InputLabel>\n                <Select\n                  labelId=\"demo-simple-select-label\"\n                  id=\"demo-simple-select\"\n                  value={game}\n                  label=\"Game Type\"\n                  onChange={handleGame}\n                >\n                  {games.map((gameDetails) => (\n                    <MenuItem key={gameDetails.id} value={gameDetails.id}>\n                      {gameDetails.gameName}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Box>\n          </Grid>\n        </Grid>\n      </MainCard>\n      {/* data table */}\n      <MainCard title=\"LeaderBoard Table\" sx={{ mt: 5 }}>\n        {data.length > 0 ? (\n          <MainTable\n            titles={[\n              \"Rank\",\n              \"User Name\",\n              \"Email\",\n              \"Score\",\n              \"Last updated date\",\n            ]}\n            data={tempData}\n          ></MainTable>\n        ) : (\n          <Box sx={{ textAlign: \"center\" }}>No data found</Box>\n        )}\n      </MainCard>\n    </React.Fragment>\n  );\n};\n\nexport default LeaderBoard;\n"],"sourceRoot":""}